import warnings
import argparse
import logging
import cProfile
import pstats
import io
from .elastic_cvr_extract import CvrConnection, test_producer
from . import cvr_makedb
from . import setup_database_connection


def info_print(_s):
    stars = '*' * 10
    print('{0} {1} {2}'.format(stars, _s, stars))


def run_init():
    """ Create database tables and indices and fill dawa adresses """
    crdb = cvr_makedb.MakeCvrDatabase()
    crdb.create_tables()


def fill_dawa(dawa_file):
    assert False
    #info_print('Using File {0}'.format(dawa_file))
    #crdb = cvr_makedb.MakeCvrDatabase()
    #crdb.fill_dawa_table(dawa_file=dawa_file)


def fill_employment(file_path):
    assert False
    #crdb = cvr_makedb.MakeCvrDatabase()
    #crdb.fill_employment_tables_from_file(file_path)


def create_views():
    """ Create database views """
    crdb = cvr_makedb.MakeCvrDatabase()
    crdb.create_views()


def run_small_test(ecvr):
    """ Small test that should put data in all tables
    
    Args:
    -----
      engine: sqlalchemy engine
    """
    # cvr = CvrConnection(engine)
    # companies = [4007283502, 4007283515, 4007283528]
    companies = [4871908, 4001672315, 4002006883, 4001783015, 4001935148, 4002043066, 4001989398, 4000809532, 4007135401,
                 4000333615, 4001591942, 4000940152, 4000816138, 4006979367, 4006269851, 4006355987, 4001990778,
                 4295542, 5835875, 3635428, 4000869808, 4001068255, 4001657752, 4007287317, 4001727802,
                 4003830236, 4003831613, 4007287164, 4007287584, 4001662015, 4001884158, 4001504788, 4001943372,
                 4001029748, 4006694604, 4001916992, 4001417545, 4001382698, 4003802639, 4001254238, 4000817652,
                 4001664482, 4007287537, 4007250771, 4001289568, 4001401838, 4001643302, 4006601974, 4447208,
                 4007010814, 4007287221, 4001540368, 4006716034, 4001341752, 4002044009, 4000718115, 4001725888,
                 4002040300, 4001816542, 4001803865, 4001294625, 4001944478, 4000572542, 4001362162, 4000616345,
                 3565705, 4001189732, 4001630232, 4007133814, 4002037320, 4002041226, 4001490485, 3029018, 4001848008,
                 4001629588, 5519588, 4118375, 4006452381, 4001494845, 5266978, 3977902, 4002020249, 4007271374,
                 4007288084, 4003862019, 4007288064, 4915635, 4002008623, 4002041709, 5159812, 4001485982, 4006418611,
                 4006500761, 4193055, 4001984092, 4001208525, 4006493724, 4006214314, 4000723045, 5590538, 4001328045,
                 4006231731, 4001994305, 4001698795, 4001492818, 4002035540, 4000853632, 4002009640, 4002009453,
                 4000865482, 4001857202, 4001596622, 4002011366, 4002013009, 4006513864, 4001275222, 4001986155,
                 4006955671, 4001806178, 4001462608, 5893048, 5314938, 4005939397, 4000795475, 4002004159,
                 4003799780, 4000683468, 4001970642]
    companies = companies + [4001779051, 4001108429, 4001951019, 4002016604, 5197252, 4000904596, 4006281070, 4002034309, 4006994873, 4000394451, 4006612972, 4006687273, 4001723271, 4000868378, 4007977563, 4006630700, 4007978300, 4007978740, 4007977605, 4007977956, 4007977494, 4000556131, 4007144526, 4001760096, 4001152505, 4007946039, 4006906070, 4001035238, 4006200797, 4533419, 4001998251, 3954297, 4000893855, 4006881065, 4001010541, 4451055, 4006894790, 4006321004, 4006428843, 4001653665, 4001595654, 4001790050, 4007977668, 4003837856, 4007976110, 4006452852, 4001281428, 5482734, 4001174459, 4001706520, 4001849533, 4001728899, 4001444683, 4000885061, 4001619283, 4001627811, 4001544392, 4007125540, 4005913170, 4006263568, 4001531526, 4007400766, 4007585969, 4000924883, 4886878]
    companies = companies + [4886878]
    companies = [4886878, 3855530, 4008235027]
    companies = list(set(companies))
    commpanies = [4001915100, 4008231608, 5527587, 4000842787, 4001185341, 4001701109, 4007288338, 4000874280, 4006245359, 4001848280, 4008167431, 4007723156, 4006607011, 4001916543, 4001824061, 4009373040, 4001885434, 4001810146, 3559170, 4007291484, 4001023495, 4001899251, 4008063812, 4008834710, 4008219803, 4001662112, 4001957441, 4008197087, 4001894833, 4001956571, 4007934217, 4009002082, 4008497930, 4001673562, 4001773062, 4001633656, 3648700, 4006232030, 4001929717, 4008457601, 4001247484, 4001718026, 4006206239, 4003850420, 4009007766, 5328969, 4001757678, 4001046864, 4006374915, 4001871347, 4006861342, 4006642942, 4008862484, 4008860609, 4000845475, 4001636893, 4008196432, 4006231880, 4008388908, 4009229588, 4001873350, 4008290031, 4001820546, 4009132043, 4006803327, 4001322691, 4001576394, 4006004482, 4001976047, 4001462026, 4001641240, 4001615704, 4002018350, 4001826939, 4001680887, 4007733489, 4001256578, 4001334305, 4001811780, 4001796032, 4001620179, 4006944551, 4009081566, 4001855351, 4001178786, 4001927116, 4001613762, 4001668934, 4001824011, 3988976, 4001659123, 4001929936, 4002027327, 4001710078, 4009259489, 5255756, 4000860757, 4008652949, 4001974903, 4008774197, 4001369142, 5699640, 4006778411, 4001359796, 4008719898, 4008919756, 4006726340, 4001904636, 4001206891, 4006467585, 4001092866, 4004368886, 4007416899, 4001728081, 4009091551, 4008865268, 4000857373, 4008289920, 4006790096, 4000978246, 4000924593, 4000923167, 4008858490, 4007001687, 4007951321, 4006791565, 4006883993, 4001676853, 4008784213, 4006024346, 4006355134, 4001517282, 4001183131, 4360022, 4001047090, 4000946841, 4001933617, 4001313899, 4009037896, 4001526287, 4000912675, 4001185023, 4006429016, 4001237236, 4008883029, 4001674090, 4001356093, 4001875679, 4001760885, 4001046057, 4009194594, 4001294179, 4001197206, 4001336205, 4001311054, 4001000452, 4000797242, 4007640386, 4001386555, 5013957, 4008836589, 4008691745, 4001371765, 4008494557, 4001221188, 4008655904, 4001911714, 4006968685, 4001259875, 4001103458, 4001123877, 4006338092, 2581264, 4001879750, 4008732117, 4001522108, 4008414480, 4001263564, 4001116703, 4001330301, 4007978146, 4006393247, 4008193618, 4007573920, 4001804739, 4001876781, 4003812448, 4001992776, 4001634346, 4007567757, 4008096996, 4000896698, 4001980324, 4000968078, 4007660085, 4001665458, 4001775775, 4008135813, 4001889524, 4001985557, 4000911034, 4007900306, 4000653816, 4001557541, 4007446101, 4001079354, 4001006062, 4001674789, 4008831991, 4001877563, 4001747472, 4008992395, 4001111951, 5323168, 4001254085, 4001198423, 4006770996, 4001366579, 4001656850, 4001195066, 4008487086, 4001404203, 4007572622, 4008339283, 4000993862, 4007492225, 4001887494, 3947096, 4008147563, 4009016907, 4002044110, 4001740582, 4001544641, 4006248938, 4006717650, 4003791678, 4008630473, 4008851177, 4001184182, 4008388798, 4006527916, 4000965695, 4006753239, 4001330288, 4001961595, 2438919, 3839668, 4007603843, 4009277794, 4006699255, 4007537597, 4003799187, 4003858347, 4006756829, 4003835480, 4001539874, 4001389452, 4527285, 4001521656, 4008840125, 4006747860, 4007427258, 4001761073, 4001998608, 4001278225, 4006985816, 4006201243, 4007498079, 4001483181, 4001251658, 4001809145, 4007783300, 4001406088, 4008981566, 4001782589, 4008637349, 4003798608, 4007220782, 4001538659, 4002047724, 4007667387, 4006815715, 4007002495, 4001764972, 4000938447, 4001804777, 4006833547, 4001716362, 4001671527, 4004365462, 4001867673, 4006874892, 4008055561, 4006898195, 4006580287, 4650618, 4007474056, 4006496393, 4006539860, 4008025102, 4006200098, 4001142126, 4000856227, 5676934, 4001329231, 4007460638, 4007960928, 4001775075, 4007642618, 4008809143, 4001814818, 5232916, 4004367411, 4007898352, 4008345615, 4008879293, 4001100965, 4001973161, 4006666342, 4004347527, 4008347383, 4007789311, 4001896038, 4864089, 5513245, 4009283997, 4009216363, 4001558865, 4006828477, 4008410461, 4006517458, 4000975589, 4001174143, 4000803416, 4001251456, 4008726344, 5242343, 4008679396, 4009164688, 4008195867, 4004310554, 4001380251, 4001417533, 4001335120, 4001446456, 4002046963, 4001243232, 4001433409, 4006797646, 4001647903, 4001319954, 4001638600, 4006656490, 4001728836, 4007996763, 4001888369, 4009179829, 4006423954, 4001035742, 1923537, 4001302484, 4001980550, 4001491146, 4002003584, 4007584588, 4001439865, 4296428, 4007570307, 4001984062, 4001120349, 4001417294, 4003854438, 4006305964, 4006224790, 4000760274, 4000824143, 4009029461, 4001996076, 4001668526, 2656931, 4001145219, 4009294405, 4007800455]
    
    companies = [4003850420]
    # companies = [4007568555]
    # companies = [4001178549, 4001394153, 749, 4046495, 4001156549, 4001756407, 867703, 4006491007, 3595755,
    #              4006829870, 4002005199, 4001726704, 5768770, 4006916557, 4006916557, 4006511400, 4006372756,
    #              4006372744, 4006510742, 4006372756, 4006829870, 4006491007, 4056080, 4001815333, 4006395397,
    #              4001075071, 4001251542, 3214807]
    # companies = [4001575583]
    # companies = [4000981898]
    # companies = [4001582635]
    # companies = [4006898357]
    # companies = companies[0:2]
    print('try all at once')
    companies = [4003754700, 4002079790, 4002548705, 4002079806, 4002547988, 4002629843, 4002548015, 4007286793, 4007388056, 4002549715, 4006250208, 4002549382, 4002079080, 4002549405, 4002629463, 4002549412, 4003717878, 4002549418, 4007383422, 4002080169, 4002555808, 4002080446, 4002555828, 4002555868, 4002074539, 4006373123, 4002556515, 4003587500, 4002556542, 4002556562, 4006445970, 4002556568, 4007030638, 4002556182, 4007451038, 4002556195, 4003583410, 4002556225, 4002313535, 4002520488, 4002366423, 4002520772, 4006844434, 4002366436, 4002520815, 4006357927, 4002520835, 4003586206, 4002521148, 4003570224, 4003586239, 4002521168, 4006725643, 4002079019, 4002521175, 4003832679, 4003582026, 4002521188, 4006961747, 4002079783, 4002521492, 4006626381, 4002521548, 4002629823]
    ecvr.update_units(companies)
    return
    print('insert companies')
    for comp in companies:
        print('insert', comp)
        ecvr.update_units([comp])
    
    # is a person
    people = [4000034553, 4004192836, 4004194126, 4000145625, 4005983489]
    # # people = [4000145625]
    print('insert people')
    ecvr.update_units(people)
    print('insert penhed')
    penhed = [4002535375, 4002241948, 4003231318]
    ecvr.update_units(penhed)


def run_delete_test(mycvr):
    companies = [4001178549, 4001394153, 749, 4046495]
    # companies = companies[0:2]
    print('delete company')
    mycvr.delete(companies, mycvr.company_type)
    people = [4000034553, 4004192836, 4004194126]
    print('delete people')
    mycvr.delete(people, mycvr.person_type)
    print('delete punit')
    penhed = [4002535375, 4002241948, 4002211395]
    mycvr.delete(penhed, mycvr.penhed_type)


def data_test(ecvr):
    enh = 743
    print('update enh', 743)
    ecvr.update_units([enh])


if __name__ == '__main__':
    warnings.simplefilter("always")

    desc = 'Init and update cvr database'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-global', default='Global', dest='config', action='store_const', const='Global',
                        help="Use Global Database")
    parser.add_argument('-local', default='Global', dest='config', action='store_const', const='Local',
                        help="Use Local Database")
    parser.add_argument('-db', default=None, dest='db', type=str, help="Database Name")

    parser.add_argument('-init', default=False, help='Initialize database', dest='init', action='store_true')
    parser.add_argument('-create_views', default=False, help='Create Views', dest='create_views', action='store_true')
    parser.add_argument('-fill_dawa', default=False, help='Download and Fill Dawa Address Table', dest='fill_dawa',
                        action='store_true')
    parser.add_argument('-fill_emp', default=False, help='Fill Employment Table With External Data', dest='fill_emp',
                        action='store_true')
    parser.add_argument('-small_test', default=False, dest='small_test', action='store_true', help="Small Test")
    parser.add_argument('-delete_test', default=False, dest='delete_test',
                        action='store_true', help="Delete Small Test")
    parser.add_argument('-enable_address', default=False, dest='enable_add', action='store_true', help='Enable Address')
    parser.add_argument('-update', default=False, dest='update_all', action='store_true', help='Update all')
    parser.add_argument('-enh', default=None, dest='enh', help="Update Given Id", type=int)
    # parser.add_argument('-disable_warnings', default=False, dest='disable_warnings', help="Disable Warnings",
    #                     action='store_true')
    parser.add_argument('-log', default=False, dest='logging', help='enable logging', action='store_true')
    parser.add_argument('-resume', default=False, dest='resume',
                        help='resume cvr update - mainly for debugging restart', action='store_true')
    parser.add_argument('-time', default=None, dest='time',
                        help='time test with file')
    parser.add_argument('-threading', default=False, dest='threading',
                        action='store_true')

    args = parser.parse_args()
    setup_database_connection()
    # config = db_setup.get_config()
    setup_args = {}
    # if args.disable_warnings:
    #     warnings.simplefilter("ignore")
    # if args.fill_emp:
    #     info_print('Fill exact employee numbers from file')
    #     fill_employment(dbmodel, config['employmentpath'])
    # if args.logging:
    #     logging.basicConfig(level=logging.DEBUG)
    print('what is args', args)
    if args.db is not None:
        setup_args['db'] = args.db
    if args.init:
        info_print('Initialiaze database by creating necessary tables')
        run_init()
    if args.create_views:
        info_print('create views - usually best to wait to after all data has been inserted once')
        create_views()
    if args.fill_dawa:
        info_print('Download and fill dawa address tables')
        assert False, "not currently working"
        #fill_dawa()
    cvr = CvrConnection(update_address=args.enable_add)
    run_small_test(cvr)
    
